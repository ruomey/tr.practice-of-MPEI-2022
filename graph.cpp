#include <iostream>


#include <cmath>
#include <vector>

#include "plant.h"
#include "graph.h"
#include "discpp.h"

using std::vector;

void graph(vector<float>ox ,vector<float>oy){
    // Инициализация ОУ.
    Plant plant;
    plant_init(plant);
    // Объект для рисования графика.
    Dislin g;

    // Формат вывода, "cons" означает вывод на экран.
    g.metafl("cons");

    // Включает режим светлого фона (по умолчанию наоборот).
    g.scrmod("revers");


    // Инициализирует библиотеку, должно быть раньше других вызовов отрисовки.
    g.disini();
    g.axslen (ox.size()*50, 1200);
    // Задает подписи осей.
    g.name("Measurement no.", "x");
    g.name("Value", "y");

    // Количество цифр после запятой по оси абсцисс: нет, только целая часть.
    g.labdig(-1, "x");

    // Количество промежуточных меток (между числами) на осях.
    g.ticks(10, "x");
    g.ticks(10, "y");

    // Задает заголовок графика.
    g.titlin("Reserch hit rates in channel", 1);

    // Определяет цвет как смесь красного, зеленого и синего от 0 до 1 (RGB).
    // Здесь: все компоненты равны и близки к 1, т. е. цвет светло-серый.
    const int background_color = g.intrgb(0.95, 0.95, 0.95);

    // Использует ране определенный цвет для заливки фона.
    g.axsbgd(background_color);

    // Задает координатную сетку.
    g.graf(
        // Область значений по оси абсцисс (X).
        ox[0], ox[ox.size()-1],
        // Наименишее значение на оси абсцисс и следующее за ним.
        ox[0], ox[1] * (ox.size()/10),
        // Область значений по оси ординат (Y).
        oy[0], 1.0,
        // Наименьшее значение на оси ординат и следующее за ним.
        oy[0],oy[1]* (oy.size()*5));

    // Задает светло-сервый цвет для следующего вызова.
    g.setrgb(0.7, 0.7, 0.7);
    // Отрисовывает сетку с заданными шагами по осям.
    g.grid(2, 4);

    // Задает цвет для следующего вызова из числа стандартных.
    // Здесь: основной цвет, контрастный с фоном (черный для белого фона).
    g.color("fore");
    // Отрисовывает заголовок.
    g.title();

    // Отрисовывает крисую данных.
    g.color("red");
    g.curve(&ox[0],&oy[0], ox.size());

    // Завершает работу библиотеки, должно быть после всех вызовов отрисовки.
    g.disfin();

}
